<?php

namespace Soluble\Japha\Bridge;

use Soluble\Japha\Bridge\Driver\Pjb621;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class PhpJavaBridgeTest extends \PHPUnit_Framework_TestCase
{
    protected $pjb;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        \SolubleTestFactories::startJavaBridgeServer();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     *
     */
    public function testIncludeBridge()
    {
        PhpJavaBridge::includeBridge(\SolubleTestFactories::getJavaBridgeServerAddress());
    }
   

    public function testJavaClassThrowsNoSuchMethodException()
    {
        $this->setExpectedException("Soluble\Japha\Bridge\Exception\NoSuchMethodException");
        $system = PhpJavaBridge::getJavaClass('java.lang.System');
        $properties = $system->getNonExistingMethod();
    }

    
    public function testIsInstanceOf() {
        
        $d = PhpJavaBridge::getDriver();
        $system = $d->getJavaClass('java.lang.System');
        $string = $d->instanciate('java.lang.String', 'Hello');
        $hash = $d->instanciate('java.util.HashMap', array());
        
        $this->assertFalse($d->isInstanceOf($system, $string));
        $this->assertFalse($d->isInstanceOf($hash, $string));
        $this->assertTrue($d->isInstanceOf($string, 'java.lang.String'));
        
    }
    /*
    public function testIsInstanceOfThrowsInvalidArgumentException() {
        $this->setExpectedException('Soluble\Japha');
        $d = PhpJavaBridge::getDriver();
        $string = $d->instanciate('java.lang.String', 'Hello');
        $this->assertTrue($d->isInstanceOf($string, 'java.util.HashMa'));        
    }*/
    
    public function testObjects() {

        $d = PhpJavaBridge::getDriver();

        $hash = $d->instanciate("java.util.HashMap", array('ckey' => 'test'));
        $hash->put('my_key', 1);
        $this->assertEquals("1", (string) $hash->get('my_key'));
        $this->assertEquals("1", $hash->get('my_key'));
        $this->assertEquals("test", $hash->get('ckey'));
        $this->assertNull($d->getClient()->getValues($hash->get('nonexisting')));
        
        $string = $d->instanciate("java.lang.String", "cool");
        $this->assertEquals("cool", $d->getClient()->getValues($string));        

        $chr = $string->toCharArray();
        $arr = $d->getClient()->getValues($chr);
        $this->assertInternalType('array', $arr);
        $this->assertEquals("c", $arr[0]);
        
        $hash = $d->instanciate("java.util.HashMap", array());
        $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\Java', $hash);
        $this->assertInstanceOf('Soluble\Japha\Interfaces\JavaObject', $hash);
        $this->assertNotInstanceOf('Soluble\Japha\Interfaces\JavaClass', $hash);
        //$this->assertEquals('java.util.HashMap', $params->get__signature());
        
    }
    
    
    public function testDriverPjb621()
    {
        $pjb = PhpJavaBridge::getDriver();

        $system = $pjb->getJavaClass('java.lang.System');
        $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\JavaClass', $system);
        //$this->assertEquals('java.lang.System', $system->get__signature());

        /* @var $properties \Soluble\Japha\Bridge\Pjb621\InternalJava */
        $properties = $system->getProperties();
//var_dump(get_class($properties));
//die();
      //  $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\InternalJava', $properties);
        //$this->assertEquals("java.util.Properties", $properties->get__signature());

        $this->assertInternalType('string', $properties->__cast('string'));
        $this->assertInternalType('string', $properties->__toString());

        $vm_name = $properties->get('java.vm.name');
        $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\InternalJava', $vm_name);
        
        
        foreach ($properties as $key => $value) {
            $this->assertInternalType('string', $key);
//            $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\InternalJava', $value);
        }

        $iterator = $properties->getIterator();
        $this->assertInstanceOf('Soluble\Japha\Bridge\Driver\Pjb621\ObjectIterator', $iterator);
        $this->assertInstanceOf('Iterator', $iterator);


        
        // whether Java, OpenJDK..., 'J' is wide
        //echo $vm_name->__toString(); die();
        $this->assertContains('J', $vm_name->__toString());
        $this->assertContains('J', (string) $vm_name);


    }
    

}